// <auto-generated />
using Demo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using System;

namespace Demo.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Demo.Models.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Email");

                    b.Property<DateTime>("Last_Login_Time");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Demo.Models.Finder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<bool>("Complete");

                    b.Property<string>("Content");

                    b.Property<DateTime>("LastReplyTime");

                    b.Property<int?>("LoseTypeID");

                    b.Property<string>("Question");

                    b.Property<DateTime>("Time");

                    b.Property<int?>("UserID");

                    b.Property<bool>("hidden");

                    b.HasKey("ID");

                    b.HasIndex("LoseTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Finders");
                });

            modelBuilder.Entity("Demo.Models.LoseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("LoseTypes");
                });

            modelBuilder.Entity("Demo.Models.Owner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Complete");

                    b.Property<string>("Content");

                    b.Property<DateTime>("LastReplyTime");

                    b.Property<int?>("LoseTypeID");

                    b.Property<DateTime>("Time");

                    b.Property<int?>("UserID");

                    b.Property<bool>("hidden");

                    b.HasKey("ID");

                    b.HasIndex("LoseTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Demo.Models.PrivateMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ReceiverID");

                    b.Property<int?>("SenderID");

                    b.Property<string>("content");

                    b.Property<string>("source");

                    b.Property<DateTime>("time");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("Demo.Models.Reply", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ReplyContent");

                    b.Property<int?>("UserID");

                    b.Property<int?>("ownerID");

                    b.Property<DateTime>("time");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("ownerID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("Demo.Models.ReplyComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ReplierID");

                    b.Property<string>("ReplyContent");

                    b.Property<int?>("UserID");

                    b.Property<DateTime>("time");

                    b.HasKey("ID");

                    b.HasIndex("ReplierID");

                    b.HasIndex("UserID");

                    b.ToTable("ReplyComments");
                });

            modelBuilder.Entity("Demo.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("School");

                    b.Property<string>("Sex");

                    b.Property<string>("UserName");

                    b.Property<string>("email");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Demo.Models.Finder", b =>
                {
                    b.HasOne("Demo.Models.LoseType", "LoseType")
                        .WithMany()
                        .HasForeignKey("LoseTypeID");

                    b.HasOne("Demo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Demo.Models.Owner", b =>
                {
                    b.HasOne("Demo.Models.LoseType", "LoseType")
                        .WithMany()
                        .HasForeignKey("LoseTypeID");

                    b.HasOne("Demo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Demo.Models.PrivateMessage", b =>
                {
                    b.HasOne("Demo.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID");

                    b.HasOne("Demo.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID");
                });

            modelBuilder.Entity("Demo.Models.Reply", b =>
                {
                    b.HasOne("Demo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("Demo.Models.Owner", "owner")
                        .WithMany()
                        .HasForeignKey("ownerID");
                });

            modelBuilder.Entity("Demo.Models.ReplyComment", b =>
                {
                    b.HasOne("Demo.Models.Reply", "Replier")
                        .WithMany()
                        .HasForeignKey("ReplierID");

                    b.HasOne("Demo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
